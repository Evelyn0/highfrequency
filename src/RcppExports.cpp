// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// heavy_parameter_transformR
void heavy_parameter_transformR(NumericVector parameters, int K, IntegerVector p, IntegerVector q, NumericVector O, NumericVector A, NumericVector B, IntegerVector pMax1, IntegerVector qMax1);
RcppExport SEXP _highfrequency_heavy_parameter_transformR(SEXP parametersSEXP, SEXP KSEXP, SEXP pSEXP, SEXP qSEXP, SEXP OSEXP, SEXP ASEXP, SEXP BSEXP, SEXP pMax1SEXP, SEXP qMax1SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type O(OSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pMax1(pMax1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qMax1(qMax1SEXP);
    heavy_parameter_transformR(parameters, K, p, q, O, A, B, pMax1, qMax1);
    return R_NilValue;
END_RCPP
}
// heavy_parameter_transform_RetrackR
void heavy_parameter_transform_RetrackR(NumericVector parameters, int K, IntegerVector p, IntegerVector q, NumericVector means, NumericVector O, NumericVector A, NumericVector B, IntegerVector pMax1, IntegerVector qMax1);
RcppExport SEXP _highfrequency_heavy_parameter_transform_RetrackR(SEXP parametersSEXP, SEXP KSEXP, SEXP pSEXP, SEXP qSEXP, SEXP meansSEXP, SEXP OSEXP, SEXP ASEXP, SEXP BSEXP, SEXP pMax1SEXP, SEXP qMax1SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type means(meansSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type O(OSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pMax1(pMax1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qMax1(qMax1SEXP);
    heavy_parameter_transform_RetrackR(parameters, K, p, q, means, O, A, B, pMax1, qMax1);
    return R_NilValue;
END_RCPP
}
// heavy_likelihoodR
void heavy_likelihoodR(NumericVector parameters, NumericVector data, IntegerVector T1, IntegerVector K1, NumericVector means, IntegerVector p, IntegerVector q, IntegerVector pMax1, IntegerVector qMax1, NumericVector backcast, NumericVector LB, NumericVector UB, IntegerVector compconst1, NumericVector h, NumericVector lls, NumericVector llRM, NumericVector ll);
RcppExport SEXP _highfrequency_heavy_likelihoodR(SEXP parametersSEXP, SEXP dataSEXP, SEXP T1SEXP, SEXP K1SEXP, SEXP meansSEXP, SEXP pSEXP, SEXP qSEXP, SEXP pMax1SEXP, SEXP qMax1SEXP, SEXP backcastSEXP, SEXP LBSEXP, SEXP UBSEXP, SEXP compconst1SEXP, SEXP hSEXP, SEXP llsSEXP, SEXP llRMSEXP, SEXP llSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type T1(T1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type means(meansSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pMax1(pMax1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qMax1(qMax1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type backcast(backcastSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UB(UBSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type compconst1(compconst1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lls(llsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type llRM(llRMSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ll(llSEXP);
    heavy_likelihoodR(parameters, data, T1, K1, means, p, q, pMax1, qMax1, backcast, LB, UB, compconst1, h, lls, llRM, ll);
    return R_NilValue;
END_RCPP
}
// nsmaller
int nsmaller(IntegerVector times, IntegerVector lengths, int start, int end, int max);
RcppExport SEXP _highfrequency_nsmaller(SEXP timesSEXP, SEXP lengthsSEXP, SEXP startSEXP, SEXP endSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(nsmaller(times, lengths, start, end, max));
    return rcpp_result_gen;
END_RCPP
}

RcppExport void heavy_likelihoodR(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_highfrequency_heavy_parameter_transformR", (DL_FUNC) &_highfrequency_heavy_parameter_transformR, 9},
    {"_highfrequency_heavy_parameter_transform_RetrackR", (DL_FUNC) &_highfrequency_heavy_parameter_transform_RetrackR, 10},
    {"_highfrequency_heavy_likelihoodR", (DL_FUNC) &_highfrequency_heavy_likelihoodR, 17},
    {"_highfrequency_nsmaller", (DL_FUNC) &_highfrequency_nsmaller, 5},
    {"heavy_likelihoodR", (DL_FUNC) &heavy_likelihoodR, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_highfrequency(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
